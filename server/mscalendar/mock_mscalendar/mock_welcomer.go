// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-mscalendar/server/mscalendar (interfaces: Welcomer)

// Package mock_mscalendar is a generated GoMock package.
package mock_mscalendar

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWelcomer is a mock of Welcomer interface
type MockWelcomer struct {
	ctrl     *gomock.Controller
	recorder *MockWelcomerMockRecorder
}

// MockWelcomerMockRecorder is the mock recorder for MockWelcomer
type MockWelcomerMockRecorder struct {
	mock *MockWelcomer
}

// NewMockWelcomer creates a new mock instance
func NewMockWelcomer(ctrl *gomock.Controller) *MockWelcomer {
	mock := &MockWelcomer{ctrl: ctrl}
	mock.recorder = &MockWelcomerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWelcomer) EXPECT() *MockWelcomerMockRecorder {
	return m.recorder
}

// AfterDisconnect mocks base method
func (m *MockWelcomer) AfterDisconnect(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterDisconnect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterDisconnect indicates an expected call of AfterDisconnect
func (mr *MockWelcomerMockRecorder) AfterDisconnect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterDisconnect", reflect.TypeOf((*MockWelcomer)(nil).AfterDisconnect), arg0)
}

// AfterSetConfirmations mocks base method
func (m *MockWelcomer) AfterSetConfirmations(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterSetConfirmations", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterSetConfirmations indicates an expected call of AfterSetConfirmations
func (mr *MockWelcomerMockRecorder) AfterSetConfirmations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterSetConfirmations", reflect.TypeOf((*MockWelcomer)(nil).AfterSetConfirmations), arg0, arg1)
}

// AfterSuccessfullyConnect mocks base method
func (m *MockWelcomer) AfterSuccessfullyConnect(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterSuccessfullyConnect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterSuccessfullyConnect indicates an expected call of AfterSuccessfullyConnect
func (mr *MockWelcomerMockRecorder) AfterSuccessfullyConnect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterSuccessfullyConnect", reflect.TypeOf((*MockWelcomer)(nil).AfterSuccessfullyConnect), arg0, arg1)
}

// AfterUpdateStatus mocks base method
func (m *MockWelcomer) AfterUpdateStatus(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterUpdateStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterUpdateStatus indicates an expected call of AfterUpdateStatus
func (mr *MockWelcomerMockRecorder) AfterUpdateStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterUpdateStatus", reflect.TypeOf((*MockWelcomer)(nil).AfterUpdateStatus), arg0, arg1)
}

// Welcome mocks base method
func (m *MockWelcomer) Welcome(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Welcome", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Welcome indicates an expected call of Welcome
func (mr *MockWelcomerMockRecorder) Welcome(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Welcome", reflect.TypeOf((*MockWelcomer)(nil).Welcome), arg0)
}
